#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//düğüm yapısı
typedef struct node {
    char name[30];
    int age;
    struct node *next;
} node;

//liste oluşturma fonksiyonu
node *createList() {
    int k, n;
    node *head = NULL, *p = NULL;

    printf("How many people in the list: ");
    scanf("%d",&n);

    for(k = 0; k < n; k++) {
        if (k == 0) {
            head = (node*)malloc(sizeof(node));
            p = head;
        }
        else {
            p->next = (node*)malloc(sizeof(node));
            p = p->next;
        }
        printf("Enter %d. name", k + 1);
        scanf("%s", p->name);

        printf("Enter age: ");
        scanf("%d", &p->age);

    }
    p->next = NULL; //listenin sonu
    return head; //başı döndür
}

//alfabetik sıralama fonksiyonu ve ekleme yapma
void insertInOrder(node **head_ref, char *name, int age) {
    node *new_node = (node*)malloc(sizeof(node));
    strcpy(new_node->name, name);
    new_node->age = age;
    new_node->next = NULL;

    if (*head_ref == NULL || strcmp(name, (*head_ref)->name) < 0) {
        new_node->next = *head_ref;
        *head_ref = new_node;
        return;
    }

    node *current = *head_ref;
    while (current->next != NULL && strcmp(name, current->next->name) > 0) {
        current = current->next;
    }

    new_node->next = current->next;
    current->next = new_node;

}

//Belirtilen Düğümü Silme 
void deleteNode(node **head_ref, char *target_name) {
    node *temp = *head_ref, *prev = NULL;

    // Baş düğüm silinecekse
    if (temp != NULL && strcmp(temp->name, target_name) == 0) {
        *head_ref = temp->next;
        free(temp);
        return;
    }

    // Aradığımız isme kadar ilerle
    while (temp != NULL && strcmp(temp->name, target_name) != 0) {
        prev = temp;
        temp = temp->next;
    }

    // Bulunamadıysa
    if (temp == NULL) return;

    // Sil: öncekinin next'ini atla
    prev->next = temp->next;
    free(temp);
}

//printList()
void printList(node *head) {
    node *current = head;

    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    printf("\nCurrent List:\n");
    while (current != NULL) {
        printf("Name: %s, Age: %d\n", current->name, current->age);
        current = current->next;
    }
}

//En Uzun İsmi Bulan Fonksiyon
void findLongestName(node *head) {
    node *current = head;
    node *longest = head;

    while (current != NULL) {
        if (strlen(current->name) > strlen(longest->name)) {
            longest = current;
        }
        current = current->next;
    }

    if (longest != NULL) {
        printf("Longest name: %s (%lu characters)\n", longest->name, strlen(longest->name));
    }
}

//menü
int main() {
    node *head = NULL;
    int choice, age;
    char name[30];

    do {
        printf("\n1. Add new person\n2. Delete person\n3. Find longest name\n4. Print list\n0. Exit\nChoice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter name: ");
                scanf("%s", name);
                printf("Enter age: ");
                scanf("%d", &age);
                insertInOrder(&head, name, age);
                break;
            case 2:
                printf("Enter name to delete: ");
                scanf("%s", name);
                deleteNode(&head, name);
                break;
            case 3:
                findLongestName(head);
                break;
            case 4:
                printList(head);
                break;
        }

    } while (choice != 0);

    return 0;
}
