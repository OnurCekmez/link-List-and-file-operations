#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//düğüm yapısı
typedef struct node{
    int student_number;
    char student_name[30];
    int student_vize;
    int student_final;
    struct node *next;
}node;

//data ekleme fonksiyonu

void insertStudent(node **head_ref) {
    node *new_node = (node*)malloc(sizeof(node));

    printf("Enter student number: ");
    scanf("%d", &new_node->student_number);

    printf("Enter student name: ");
    scanf("%s", new_node->student_name);

    printf("Enter vize grade: ");
    scanf("%d", &new_node->student_vize);

    printf("Enter final grade: ");
    scanf("%d", &new_node->student_final);

    new_node->next = NULL;

    if (*head_ref == NULL) {
        //liste boşsa, yeni düğüm head olur
        *head_ref = new_node;
        return;
    }

    node *current = *head_ref;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = new_node;
}

//ögrenci silme

void deleteStudent(node **head_ref, int target_number) {
    node *temp = *head_ref;
    node *prev = NULL;

    //liste boşsa
    if (temp ==  NULL) {
        printf("List id empty\n");
        return;
    }

    //ilk düğüm silinecek
    if (temp != NULL && temp->student_number == target_number) {
        *head_ref = temp->next; //headi ileri al
        free(temp);
        printf("Student deleted\n");
        return;
    }

    //diğer düğümleri tarama
    while (temp != NULL && temp->student_number != target_number) {
        prev = temp;
        temp = temp->next;
    }

    //bulunamadıysa
    if (temp == NULL) {
        printf("Student not found\n");
        return;
    }

    //silme işlemi
    prev->next = temp->next;
    free(temp);
    printf("Student deleted\n");

}

// ögrenci başarı notu
void printStudentsWithAverage(node *head) {
    node *current = head;

    if (current == NULL) {
        printf("List is empty.\n");
        return;
    }

    printf("\nStudent List with Averages:\n");

    while (current != NULL) {
        float average = current->student_vize * 0.4 + current->student_final * 0.6;
        printf("Number: %d | Name: %s | Vize: %d | Final: %d | Average: %.2f\n",
               current->student_number,
               current->student_name,
               current->student_vize,
               current->student_final,
               average);
        current = current->next;
    }
}

//en yüksek not
void findTopStudent(node *head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    node *current = head;
    node *top = head;
    float top_avg = current->student_vize * 0.4 + current->student_final * 0.6;

    current = current->next;

    while (current != NULL) {
        float current_avg = current->student_vize * 0.4 + current->student_final * 0.6;

        if (current_avg > top_avg) {
            top = current;
            top_avg = current_avg;
        }

        current = current->next;
    }

    printf("\nTop Student:\n");
    printf("Number: %d | Name: %s | Vize: %d | Final: %d | Average: %.2f\n",
           top->student_number,
           top->student_name,
           top->student_vize,
           top->student_final,
           top_avg);
}


//tüm ort
void calculateClassAverage(node *head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    node *current = head;
    float total = 0;
    int count = 0;

    while (current != NULL) {
        float avg = current->student_vize * 0.4 + current->student_final * 0.6;
        total += avg;
        count++;
        current = current->next;
    }

    float class_avg = total / count;

    printf("\nClass Average: %.2f\n", class_avg);
}

//menü
int main() {
    node *head = NULL;
    int choice;
    int delete_number;

    do {
        printf("\n==== STUDENT MANAGEMENT SYSTEM ====\n");
        printf("1. Add new student\n");
        printf("2. Delete student\n");
        printf("3. Show all students with success grades\n");
        printf("4. Show top student\n");
        printf("5. Show class average\n");
        printf("0. Exit\n");
        printf("Choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                insertStudent(&head);
                break;
            case 2:
                printf("Enter student number to delete: ");
                scanf("%d", &delete_number);
                deleteStudent(&head, delete_number);
                break;
            case 3:
                printStudentsWithAverage(head);
                break;
            case 4:
                findTopStudent(head);
                break;
            case 5:
                calculateClassAverage(head);
                break;
            case 0:
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice. Try again.\n");
        }

    } while (choice != 0);

    return 0;
}
